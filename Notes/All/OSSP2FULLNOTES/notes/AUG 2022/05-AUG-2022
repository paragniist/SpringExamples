How to create custom java bean validator?
There are 2 things to be takencare in creating a custom bean validator
1. create an constraint annotation through which we can enforce or apply validation on a bean property
2. create an constraint validator that contains the validation logic to be applied

#1. constraint annotation
define our own constraint annotation with 3 attributes inside it
	1.1 message = message refers to the default message we wanted to render upon the constraint violation
	1.2 groups 
	1.3 payload
	
@Documented	
@Target({ElementType.FIELD, ElementType.PARAMETER})
@Retention(RetentionPolicy.RUNTIME)
@Constraint(validatedBy=PhoneNumberValidator.class)
interface @Phonenumber {
	String message() default "phonenumber is not valid";
	Class<?>[] groups() default {};
	Class<? extends Payload>[] payload() default {};
}	

class Trip {
	@Phonenumber(message="enquiryNo is not valid", origin="USA")
	private String enquiryNo;
}

validator.validate(trip);

#2. For the above Constraint annotation to apply validation we need to write our own validator
upon invoking validate method by passing the bean object, the validator looks at the constraint annotation and identifies the corresponding validator and invokes it by passing attribute value of the object.
	
public class PhonenumberValidator implements ConstraintValidator<PhoneNumber, String> {
	
	public void initialize(PhoneNumber phoneNumber) {
		
	}
	
	public boolean isValid(String value, ConstraintValidatorContext ctxt) {
		if(value == null || value.trim().length < 10 || value.trim().length > 12) {
			return false;
		}else {
			for(int i=0;i<value.length;i++) {
				char c = value.indexOf(i);
				if(Character.isDigit(c) == false) {
					return false;
				}
			}
		}		
	}	
}
	
class Project {
	Date fromDate;
	Date toDate;
	
	@Valid30Days
	public Project(Date fromDate, Date toDate) {}
}


	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	