interface Controller {
	ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response);
}

HandlerMapping:
The DispatcherServlet dont know for which request it has received what is the controller to be used in processing the request. the developer is the one who writes the controller class with the appropriate logic to handle the request, So the developer knows for what request, which controller should be used for performing the processing

The developer has to provide the information about the request and the associated controller to be used for processing the request as an input to the DispatcherServlet through the help of HandlerMapping

One way a request can be identified to a controller is through URL Pattern, now the developer has to map each requestURL to an controller to be used inprocessing the request by configuring it as an input to the HandlerMapping

The Spring mvc has provided a standard interface from which we need write our own implementation class to act as an HandlerMapping component
	
interface HandlerMapping {
	HandlerExecutionChain getHandler(HttpServletRequest);
}	

The Spring Mvc module has provided lot of concrete implementation classes that can be directly used by the programmer rather than writing our own HandlerMapping implementations

org.springframework.web.mapping.SimpleUrlHandlerMapping
SimpleUrlHandlerMapping = maps the incoming request to an controller class by using the url of the request
	
SimpleUrlHandlerMapping
|-mappings (properties)
	|-/welcome.htm=wc
	
View:
View is a component that abstracts the underlying view technology being used in rendering a view to the enduser

To write our own view component we need write our implementation class implementing standard interface provided by spring web mvc module
	
interface View {
	void render(HttpServletRequest request, HttpServletResponse, ModelAndView mav);
}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	



















	



















